// <auto-generated />
using System;
using GameZone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameZone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameZone.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff715a05-8098-4bc1-9e29-aed8d229e1ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e10a8d4-1d89-474b-b441-f6ba75557f22",
                            Email = "mahmoudalaa72@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Mahmoud Alaa",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAHMOUDALAA72@GMAIL.COM",
                            NormalizedUserName = "MAHMOUD_ALAA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEAluQkNnwdh3Ovc0QKX9Vt6uUOfEPIh2ziJtNRR16wrHXCfahUO1JebS7jb9Z66A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "302dcdf9-badd-400f-b13b-558546a70faa",
                            TwoFactorEnabled = false,
                            UserName = "mahmoud_alaa"
                        },
                        new
                        {
                            Id = "bea19558-d13a-487a-bb7c-aa53106e120c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d2900e-4343-4a6b-8723-86d6583a052a",
                            Email = "ahmedalaa@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Alaa",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMEDALAA@GMAIL.COM",
                            NormalizedUserName = "AHMED_ALAA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKgst/1nhShuZ7Bl3Lr04fOz8u4o4Z1Rt3WGLubIYCp5wLC9aH3uerZMEhcn1VForA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3ac88ba-b821-49de-8a20-99639d0bff7b",
                            TwoFactorEnabled = false,
                            UserName = "ahmed_alaa"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Film"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "bi bi-playstation",
                            Name = "PlayStation"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "bi bi-xbox",
                            Name = "XBox"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "bi bi-nintendo-switch",
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "bi bi-pc-display",
                            Name = "PC"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Cover = "b7743952-5bc5-48ed-b0fc-f7c643ef09ea.png",
                            Description = "Assassin's Creed Valhalla is an action role-playing video game developed by Ubisoft Montreal and published by Ubisoft. It is the twelfth major installment in the Assassin's Creed series.",
                            Name = "Assassin's Creed Valhalla"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Cover = "5f2a1cff-7e87-424d-8198-9d2626e2b4de.png",
                            Description = "Among Us is a multiplayer party game developed and published by InnerSloth.",
                            Name = "Among Us"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Cover = "61084baa-edf7-4b53-ab57-ab804f6fca23.png",
                            Description = "FIFA 23 is a football simulation video game published by Electronic Arts.",
                            Name = "FIFA 23"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Cover = "6146b83a-514f-4b68-8355-c2cfab7c5656.png",
                            Description = "The Witcher 3: Wild Hunt is an action role-playing game developed and published by CD Projekt.",
                            Name = "The Witcher 3"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Cover = "915e6c02-cec0-4692-aaca-13fedcb0247b.jpg",
                            Description = "Red Dead Redemption 2 is an action-adventure game developed and published by Rockstar Games.",
                            Name = "Red Dead Redemption 2"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Cover = "814959b7-41d0-4412-ad0a-fe52f0fd3a91.jpg",
                            Description = "The Legend of Zelda: Breath of the Wild is an action-adventure video game developed and published by Nintendo.",
                            Name = "The Legend of Zelda"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Cover = "597d0d8c-9ba6-441d-991a-c68b9df45023.jpg",
                            Description = "Overwatch is a team-based multiplayer first-person shooter game developed and published by Blizzard Entertainment.",
                            Name = "Overwatch"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Cover = "ae63a01a-564c-42f1-b0f0-8493171e4d6f.jpg",
                            Description = "Pokémon GO is an augmented reality mobile game developed and published by Niantic in collaboration with Nintendo and The Pokémon Company.",
                            Name = "Pokemon Go"
                        });
                });

            modelBuilder.Entity("GameZone.Models.GameDevice", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("DeviceId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameDevices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            GameId = 1
                        },
                        new
                        {
                            DeviceId = 2,
                            GameId = 1
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 2
                        },
                        new
                        {
                            DeviceId = 4,
                            GameId = 2
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 3
                        },
                        new
                        {
                            DeviceId = 2,
                            GameId = 3
                        },
                        new
                        {
                            DeviceId = 3,
                            GameId = 3
                        },
                        new
                        {
                            DeviceId = 4,
                            GameId = 3
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 4
                        },
                        new
                        {
                            DeviceId = 3,
                            GameId = 4
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 5
                        },
                        new
                        {
                            DeviceId = 4,
                            GameId = 5
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 6
                        },
                        new
                        {
                            DeviceId = 3,
                            GameId = 6
                        },
                        new
                        {
                            DeviceId = 1,
                            GameId = 7
                        },
                        new
                        {
                            DeviceId = 3,
                            GameId = 7
                        },
                        new
                        {
                            DeviceId = 4,
                            GameId = 7
                        },
                        new
                        {
                            DeviceId = 2,
                            GameId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "018f722a-8678-48e6-ae14-b93807080bc3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1eba95a2-9c87-476b-83f1-131d51d41bd8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ff715a05-8098-4bc1-9e29-aed8d229e1ac",
                            RoleId = "018f722a-8678-48e6-ae14-b93807080bc3"
                        },
                        new
                        {
                            UserId = "bea19558-d13a-487a-bb7c-aa53106e120c",
                            RoleId = "1eba95a2-9c87-476b-83f1-131d51d41bd8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.HasOne("GameZone.Models.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GameZone.Models.GameDevice", b =>
                {
                    b.HasOne("GameZone.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.Game", "Game")
                        .WithMany("Devices")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameZone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameZone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameZone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameZone.Models.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
